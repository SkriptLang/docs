---
import { Code } from "astro:components";
import DocsFiche from "./DocsFiche.astro";
import DocData from "./DocData.astro";
import { DocType } from "./Docs.astro";

/**
 * A reference to a different Documentation.
 */
export interface DocumentationReference {
    name: string;
    id: string;
}

/**
 * A documentation entry.
 */
export interface Documentation {
    id: string,
    new: boolean;
    type: DocType;
    name: string;
    description: string[];
    deprecated: boolean;
    cancellable: boolean | null;
    since: string | null;
    requirements: string[] | null;
    eventValues: DocumentationReference[] | null;
    returnType: DocumentationReference | null;
    events: string[] | null;
    patterns: string[] | null;
    examples: string[] | null;
    keywords: string[] | null;
}

interface Props {
    docType: Documentation;
}

const { docType }: Props = Astro.props;

function color(): string {
    switch (docType.type) {
        case DocType.EVENT:
            return "0099B3";
        case DocType.CONDITION:
            return "6f1896";
        case DocType.EFFECT:
            return "337A00";
        case DocType.EXPRESSION:
            return "006e43";
        case DocType.FUNCTION:
            return "b25f0d";
        case DocType.TYPE:
            return "0d41b2";
        case DocType.SECTION:
            return "718400";
        case DocType.STRUCTURE:
            return "7a0074";
        default:
            return "000000";
    }
}
---

<section data-new={docType.new} data-type={docType.type} data-since={docType.since}
    class="doc-container">

    <div class="flex flex-col gap-1">
        <div class="flex flex-row gap-3 flex-wrap">
            {docType.deprecated ? <h2 class="opacity-50 line-through">{docType.name}</h2> : <h2>{docType.name}</h2>}
            {[docType.new].filter(x => x).map(x => <DocsFiche text="New" color="B10003"/>)}
            <DocsFiche text={docType.type} color={color()}/>
            {[docType.deprecated].filter(x => x).map(x => <DocsFiche text="Deprecated" color="520f0f"/>)}
            {[docType.cancellable].filter(x => x).map(x => <DocsFiche text="Cancellable" color="112998"/>)}

            <div class="id flex-auto relative -top-37" id={docType.id}></div> <!-- Anchor all the way up or else its in the nav bar -->
            <button class="share">
                <p class="p-2 hidden absolute w-64 my-auto shadow-lg 
                    rounded-full bg-l-icon-hover dark:bg-d-icon-hover">Copied to clipboard</p>
                <svg class="my-auto" width="18" height="19" viewBox="0 0 18 19" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12.75 17C12.125 17 11.5938 16.7812 11.1562 16.3438C10.7188 15.9062 10.5 15.375 10.5 14.75C10.5 14.675 10.5188 14.5 10.5562 14.225L5.2875 11.15C5.0875 11.3375 4.85625 11.4845 4.59375 11.591C4.33125 11.6975 4.05 11.7505 3.75 11.75C3.125 11.75 2.59375 11.5312 2.15625 11.0938C1.71875 10.6562 1.5 10.125 1.5 9.5C1.5 8.875 1.71875 8.34375 2.15625 7.90625C2.59375 7.46875 3.125 7.25 3.75 7.25C4.05 7.25 4.33125 7.30325 4.59375 7.40975C4.85625 7.51625 5.0875 7.663 5.2875 7.85L10.5562 4.775C10.5312 4.6875 10.5157 4.60325 10.5097 4.52225C10.5037 4.44125 10.5005 4.3505 10.5 4.25C10.5 3.625 10.7188 3.09375 11.1562 2.65625C11.5938 2.21875 12.125 2 12.75 2C13.375 2 13.9062 2.21875 14.3438 2.65625C14.7812 3.09375 15 3.625 15 4.25C15 4.875 14.7812 5.40625 14.3438 5.84375C13.9062 6.28125 13.375 6.5 12.75 6.5C12.45 6.5 12.1687 6.44675 11.9062 6.34025C11.6438 6.23375 11.4125 6.087 11.2125 5.9L5.94375 8.975C5.96875 9.0625 5.9845 9.147 5.991 9.2285C5.9975 9.31 6.0005 9.4005 6 9.5C5.9995 9.5995 5.9965 9.69025 5.991 9.77225C5.9855 9.85425 5.96975 9.9385 5.94375 10.025L11.2125 13.1C11.4125 12.9125 11.6438 12.7657 11.9062 12.6597C12.1687 12.5537 12.45 12.5005 12.75 12.5C13.375 12.5 13.9062 12.7188 14.3438 13.1562C14.7812 13.5938 15 14.125 15 14.75C15 15.375 14.7812 15.9062 14.3438 16.3438C13.9062 16.7812 13.375 17 12.75 17Z"/>
                    </svg>
            </button>
        </div>
        {docType.description?.map((line: string) => <p><Fragment set:html={line}/></p>)}
    </div>

    {[docType.patterns]
        .filter(x => x !== null)
        .map(x => <Code code={`${x.join("\n")}`} lang="applescript"/>)}

    <div>
        <DocData text="Since" value={docType.since}/>
        <DocData text="Requirements" value={docType.requirements}/>
        <DocData text="Supported events" value={docType.events}/>
        <DocData text="Returns" value={docType.returnType?.name ?? null}/>
    </div>

    <div class="flex flex-row gap-4">
        {[docType.examples]
            .filter(x => x !== null)
            .map(_ => 
            <button class="examples"
                style={{ backgroundColor: `#${color()}` }}>
                <svg class="transition my-auto fill-white" width="18" height="18" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg">
                    <path d="M8.60627 10.8563L5.88752 8.1375C5.85002 8.1 5.82202 8.0595 5.80352 8.016C5.78502 7.9725 5.77552 7.9255 5.77502 7.875C5.77502 7.775 5.80952 7.6875 5.87852 7.6125C5.94752 7.5375 6.03802 7.5 6.15002 7.5H11.85C11.9625 7.5 12.0533 7.5375 12.1223 7.6125C12.1913 7.6875 12.2255 7.775 12.225 7.875C12.225 7.9 12.1875 7.9875 12.1125 8.1375L9.39377 10.8563C9.33127 10.9188 9.26877 10.9625 9.20627 10.9875C9.14377 11.0125 9.07502 11.025 9.00002 11.025C8.92502 11.025 8.85627 11.0125 8.79377 10.9875C8.73127 10.9625 8.66877 10.9188 8.60627 10.8563Z"/>
                    </svg>
                Examples
            </button>
            )}
    
        {[docType.eventValues]
            .filter(x => x !== null)
            .map(_ => 
            <button class="eventValues bg-l-icon-hover dark:bg-d-icon-hover">
                <svg class="transition my-auto fill-white" width="18" height="18" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg">
                    <path d="M8.60627 10.8563L5.88752 8.1375C5.85002 8.1 5.82202 8.0595 5.80352 8.016C5.78502 7.9725 5.77552 7.9255 5.77502 7.875C5.77502 7.775 5.80952 7.6875 5.87852 7.6125C5.94752 7.5375 6.03802 7.5 6.15002 7.5H11.85C11.9625 7.5 12.0533 7.5375 12.1223 7.6125C12.1913 7.6875 12.2255 7.775 12.225 7.875C12.225 7.9 12.1875 7.9875 12.1125 8.1375L9.39377 10.8563C9.33127 10.9188 9.26877 10.9625 9.20627 10.9875C9.14377 11.0125 9.07502 11.025 9.00002 11.025C8.92502 11.025 8.85627 11.0125 8.79377 10.9875C8.73127 10.9625 8.66877 10.9188 8.60627 10.8563Z"/>
                    </svg>
                Event values
            </button>
            )}
    </div>

    <div class="example hidden">
        {[docType.examples]
            .filter(x => x !== null)
            .map(x => <Code code={`${x?.join("\n")}`} lang="applescript"/>)}
    </div>
    <div class="event-value hidden">
        {[docType.eventValues]
            .filter(x => x !== null)
            .map(x => <Code code={`${x.map(y => {
                const name = y.name;
                if (name.includes(" ")) {
                    const parts = name.split(" ");
                    return `${parts[0]} event-${parts[1]}`;
                } else {
                    return `event-${name}`;
                }
            }).join("\n")}`} lang="applescript"/>)}
    </div>
    <span class="hidden">{docType.keywords?.filter(x => x)}</span>
</section>